import win
import raw
import UserLib


namespace PLin{
	//LIN接收报文结构体
	class TLINRcvMsg{
    	BYTE Type;                           // Frame type (see LIN Received Message Types)
    	BYTE FrameId;                               // Frame ID (6 bit) + Parity (2 bit)
    	BYTE Length;                                // Frame Length (1..8)
    	BYTE Direction;                    // Frame Direction (see LIN Message Direction Types)
    	BYTE ChecksumType;              // Frame Checksum type (see LIN Message Checksum Types)
    	BYTE Data[8];                               // Data bytes (0..7)
    	BYTE Checksum;                              // Frame Checksum
    	INT  ErrorFlags;                   // Frame error flags (see Error flags for LIN Rcv Msgs)
    	LONG64 TimeStamp;                 // Timestamp in microseconds
    	WORD hHw;
	}
    class AVAILABLE_HW{//待完善
    	ctor(num){
    	
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    }
    
    class PLINMSG{//待完善
    	ctor(  ){
    		//this.FrameId = PLin.CalculatePID(id)
    		//this.Dir = dir
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    	byte FrameId;
    	byte Len;
    	byte Dir;
    	byte ChecksumType;
    	byte Data[8];
    	byte Checksum;
    }
    
    

    
    
    
    //PLIN驱动底层
    class PLINHW{
       
    	ctor( /*输入构造函数所需要的参数*/ ){
    		//构造函数，新建类的实例的时候回调用
    	};
    	type=me;
    	/*对象的所有成员必须用分号分隔*/
    	DllHandle = null;//DLL句柄（指针）
    	HWconnected = null;//已连接硬件
    	Client = null;//当前客户端
    	
    	//刷新硬件
    	FlashHw = function (){
    	    //..publish("调试信息","进入FlashHw函数")
        	if(DllHandle = null){
            	//DLL为空，返回
        		return 1; 
        	}
        	//..publish("调试信息","开始读取硬件数量")
        	//读取硬件数量
        	var HWCount = ..raw.buffer(1)
    		var ret = DllHandle.LIN_GetAvailableHardware(0,0,HWCount)
    		if(HWCount[1] == 0){
    			//数量为0，返回
    			AvailableHW = {}//有效硬件清空
    			return 2; 
    		}
    		//读取硬件数据
    		var PLinHwbuf={WORD buf[2]}
    		ret = DllHandle.LIN_GetAvailableHardware(PLinHwbuf,HWCount[1]*2,HWCount)
    		
			AvailableHW = {}//清空有效硬件
			for(i=1;HWCount[1];1){
				AvailableHW[i] = {int hLINHW;int devnum;int channel;string name}
				var HWtemp = PLinHwbuf.buf[i]
				var HWType = ..raw.buffer(4)
				var DevNum = ..raw.buffer(4)
				var Channel = ..raw.buffer(4)
				DllHandle.LIN_GetHardwareParam(HWtemp,13,HWType,4);//硬件类型
				DllHandle.LIN_GetHardwareParam(HWtemp,2,DevNum,4);//设备编号
				DllHandle.LIN_GetHardwareParam(HWtemp,3,Channel,4);//通道编号
				AvailableHW[i].hLINHW = HWtemp
				AvailableHW[i].devnum = DevNum[1]
				AvailableHW[i].channel = Channel[1]
				
				//设置设备通道名称
				select(HWType[1]) {
					case 1 {
						AvailableHW[i].name = "PCAN Pro"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					case 2 {
						AvailableHW[i].name = "PCAN Pro FD"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					case 3 {
						AvailableHW[i].name = "PLIN"++" - dev."++DevNum[1]++", chan."++Channel[1]
					}
					else {
						AvailableHW[i].name = "Unknown"
					}
				}
				
			}
			
    	}
    	//获取所有有效硬件
    	GetAvailableHW = function(){
    		return AvailableHW
    	}
    	
    	//加载DLL
    	LoadDll = function (){
    		DllHandle = ..raw.loadDll("PLinApi.dll")
    		if(DllHandle == null)return 1;
    		
    		return 0; 
    	}
    	
    	//连接
    	Connect = function(index,burdrate){
    		import math;
    		if(#AvailableHW == 0 || index > #AvailableHW)
    		{
    			return 1;
    		}
    		var m_hClient = ..raw.buffer(1)
			//新建客户端
    		DllHandle.LIN_RegisterClient("PLIN",null,m_hClient);
    		Client = m_hClient[1]//新建的客户端
    		HWtemp = AvailableHW[index].hLINHW//当前选中的通道
    		//连接新建的客户端和硬件
    		LIN_ConnectClient := DllHandle.api("LIN_ConnectClient","INT(BYTE,WORD)")//声明API函数 := 就是“或=”
    		ret = LIN_ConnectClient(Client, HWtemp);
    		if(ret != 0)
    		{
    			//错误处理，暂时没有 
    		}
    		HWconnected = HWtemp
    		//初始化硬件，设置主机、波特率
    		DllHandle.LIN_InitializeHardware(Client, HWconnected, 2, burdrate);
    		//设置客户端滤波器，不设置会收不到报文	
    		var size = math.size64(0xFFFFFFFF,0xFFFFFFFF);//设置64位的数
    		LIN_SetClientFilter := DllHandle.api("LIN_SetClientFilter","INT(BYTE,WORD,LONG64)")
    		LIN_SetClientFilter(Client,HWconnected,size)

    		return 0; 
    	}
    	
    	//断开
    	Disconnect = function(){
    		if(HWconnected != null && Client != null)
    		{
    			DllHandle.LIN_DisconnectClient(Client, HWconnected);//断开连接
    			DllHandle.LIN_RemoveClient(Client);//删除客户端
    			HWconnected = null
    			Client = null
    		}
    	}
    	
    	//判断是否连接
    	isConnected = function(){
    		if(HWconnected != null)
    		{
    			return true; 
    		}
    		else 
    		{
    			return false; 
    		}
    		
    	}
    	
    	//发送帧头
    	TransmitID = function(id){
    		if(HWconnected == null)
    		{
    			return;
    		}
    		var msgtemp = ..raw.buffer(13)
    		msgtemp[1] = id
    		DllHandle.LIN_GetPID(msgtemp)
    		msgtemp[2] = 8 //长度
    		msgtemp[3] = 3 //方向 0-disable 1-Publish 2-Subscriber 3-dirSubscriberAutoLength
    		msgtemp[4] = 2 //校验 0-Custom 1-Classic 2-Enhanced 3-Auto
    		DllHandle.LIN_Write(Client,HWconnected,msgtemp)
    	}
    	
    	TransmitData = function(id,data){
    		if(HWconnected == null)
    		{
    			return;
    		}
    		var msgtemp = ..raw.buffer(13)
    		msgtemp[1] = id
    		DllHandle.LIN_GetPID(msgtemp)//计算PID
    		msgtemp[2] = 8 //长度
    		msgtemp[3] = 1 //方向 0-disable 1-Publish 2-Subscriber 3-dirSubscriberAutoLength
    		msgtemp[4] = 2 //校验 0-Custom 1-Classic 2-Enhanced 3-Auto
    		if(id == 0x3C){
    			msgtemp[4] = 1 //校验 0-Custom 1-Classic 2-Enhanced 3-Auto
    		}
    		for(i=1;8;1){
    			msgtemp[i+4] = data[i]
    		}
    		DllHandle.LIN_CalculateChecksum(msgtemp)//计算checksum
    		DllHandle.LIN_Write(Client,HWconnected,msgtemp)
    	}
    	
    	//读取报文
    	ReadMsg = function(){
    		import console;
    		if(HWconnected == null)
    		{
    			return;
    		}
    		//LIN_Read := DllHandle.api("LIN_Read","INT(BYTE,struct& rcvmsg)")//声明API
    		var msgread = ..PLin.TLINRcvMsg()//..TLINRcvMsg();
    		var ret = DllHandle.LIN_Read(Client,msgread)//读取数据
    		
    		return ret,msgread; 
    	}
    	
    	//获取已连接设备通道名称
    	GetConnectedName = function(){
    		return AvailableHW[HWconnected].name; 
    	}
    	
    	WakeUpLIN = function(){
    		return DllHandle.LIN_XmtWakeUp(Client,HWconnected)//读取数据
    	}
    	
    	
    	
    	
    
    }
    
	
}
